{
	"name": "vlang",
	"scopeName": "source.v",
	"fileTypes": [
		"v"
	],
	"uuid": "ca9f2cc0-a834-40aa-8987-3ef92dbc7517",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#as"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#string-placeholder"
		},
		{
			"include": "#illegal-name"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#string-escaped-char"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#struct-access-modifier"
		},
		{
			"include": "#interface"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#type"
		},
		{
			"include": "#function-exist"
		},
		{
			"include": "#generic"
		},
		{
			"include": "#escaped-fix"
		},
		{
			"include": "#builtin-fix"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#flag-decl"
		},
		{
			"include": "#include-decl"
		},
		{
			"include": "#import-decl"
		},
		{
			"include": "#module-decl"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#assignment"
		},
		{
			"include": "#module-func-call"
		}
	],
	"repository": {
		"module-func-call": {
			"name": "module.function.call.v",
			"match": "\\s*(\\w+)\\.\\w+",
      		"captures": {
      		    "1": { "name": "constant.numeric.integer.v" }
      		}

		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.documentation.v",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.v"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.v"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"name": "comment.line.double-slash.v",
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.v"
						}
					},
					"end": "$"
				}
			]
		},
		"as": {
			"begin": "\\s+(as)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.as.v"
				}
			},
			"end": "([\\w.]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.alias.v"
				}
			}
		},
		"constants": {
			"name": "constant.language.v",
			"match": "\\b(true|false)\\b"
		},

		"assignment": {
			"name": "meta.definition.variable.v",
			"match": "([\\w.]+)\\s*((?:\\:|\\+|\\-|\\*|\\/|\\%|\\&|\\||\\^)?=)\\s*(?=.+)",
			"captures": {
				"1": {
					"name": "variable.assignment.other.v"
				}
			}
		},

		"struct": {
			"patterns": [
				{
					"name": "meta.definition.struct.v",
					"begin": "^\\s*(?:(mut|pub(?:\\s+mut)?|__global)\\s+)?(struct)\\s+([\\w.]+)\\s*({)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.struct.v"
						},
						"3": {
							"name": "entity.name.struct.v"
						},
						"4": {
							"name": "punctuation.definition.bracket.curly.begin.v"
						}
					},
					"end": "\\s*(})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.bracket.curly.end.v"
						}
					},
					"patterns": [
						{
							"include": "#struct-access-modifier"
						},
						{
							"match": "\\b(\\w+)\\s+([\\w\\[\\]\\*&.]+)(?:\\s*(=)\\s*((?:.(?=$|//|/\\*))*+))?",
							"captures": {
								"1": {
									"name": "variable.other.property.v"
								},
								"3": {
									"name": "keyword.operator.assignment.v"
								}
							}
						},
						{
							"include": "#types"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.definition.struct.v",
					"match": "^\\s*(?:(mut|pub(?:\\s+mut)?|__global)\\s+)?(struct)(?:\\s+([\\w.]+))?",
					"captures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.struct.v"
						},
						"3": {
							"name": "entity.name.struct.v"
						}
					}
				}
			]
		},


		"attributes": {
			"name": "meta.definition.attribute.v",
			"match": "^\\s*((\\[)(deprecated|unsafe_fn|typedef|live|inline|flag)(\\]))",
			"captures": {
				"1": {
					"name": "meta.function.attribute.v"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.v"
				},
				"3": {
					"name": "storage.modifier.attribute.v"
				},
				"4": {
					"name": "punctuation.definition.end.bracket.square.v"
				}
			}
		},
		"module-decl": {
			"name": "meta.module.v",
			"begin": "^\\s*(module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.module.v"
				}
			},
			"end": "([\\w.]+)",
			"endCaptures": {
				"1": {
					"name": "entity.name.module.v"
				}
			}
		},
		"import-decl": {
			"name": "meta.import.v",
			"begin": "^\\s*(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.v"
				}
			},
			"end": "([\\w.]+)",
			"endCaptures": {
				"1": {
					"name": "entity.name.import.v"
				}
			}
		},
		"include-decl": {
			"name": "meta.include.v",
			"begin": "^\\s*(#include)",
			"beginCaptures": {
				"1": {
					"name": "keyword.include.v"
				}
			},
			"end": "\\s+(([\\<\"])\\s*(.*)([\\>\"]))",
			"endCaptures": {
				"1": {
					"name": "string.quoted.double.v"
				}
			}
		},

		"flag-decl": {
			"name": "meta.flag.v",
			"begin": "^\\s*(#flag)",
			"beginCaptures": {
				"1": {
					"name": "keyword.flag.v"
				}
			},
			"end": "\\s+(.*?)$",
			"endCaptures": {
				"1": {
					"name": "string.quoted.single.v"
				}
			}
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.begin.v"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.v"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.begin.v"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.end.v"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.square.begin.v"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.square.end.v"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"builtin-fix": {
			"patterns": [
				{
					"patterns": [
						{
							"name": "storage.modifier.v",
							"match": "(const)(?=\\s*\\()"
						},
						{
							"name": "keyword.$1.v",
							"match": "\\b(fn|type|enum|struct|interface|map|assert|sizeof)\\b(?=\\s*\\()"
						}
					]
				},
				{
					"patterns": [
						{
							"name": "keyword.control.v",
							"match": "(\\$if|\\$else)(?=\\s*\\()"
						},
						{
							"name": "keyword.control.v",
							"match": "\\b(in|or|break|continue|default|unsafe|match|if|else|for|go|goto|defer|return)\\b(?=\\s*\\()"
						}
					]
				},
				{
					"patterns": [
						{
							"match": "(i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64))(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.numeric.v"
								}
							},
							"name": "meta.expr.numeric.cast.v"
						},
						{
							"match": "(bool|byte|byteptr|charptr|voidptr|string|ustring|rune|none)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.$1.v"
								}
							},
							"name": "meta.expr.bool.cast.v"
						}
					]
				}
			]
		},
		"escaped-fix": {
			"name": "meta.escaped.keyword.v",
			"match": "((?:@)(?:mut|pub|fn|unsafe|module|import|as|const|map|assert|sizeof|type|struct|interface|enum|in|or|match|if|else|for|go|goto|defer|return|i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64)|bool|byte|byteptr|charptr|voidptr|string|ustring|rune|none))",
			"captures": {
				"0": {
					"name": "keyword.other.escaped.v"
				}
			}
		},
		"generic": {
			"patterns": [
				{
					"name": "meta.definition.generic.v",
					"match": "(?<=[\\w\\s+])(\\<)(\\w+)(\\>)",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.angle.begin.v"
						},
						// "2": {
						// 	"patterns": [
						// 		{
						// 			"include": "#illegal-name"
						// 		},
						// 		{
						// 			"match": "\\w+",
						// 			"name": "entity.name.generic.v"
						// 		}
						// 	]
						// },
						"3": {
							"name": "punctuation.definition.bracket.angle.end.v"
						}
					}
				}
			]
		},
		"function-exist": {
			"name": "meta.support.function.v",
			"match": "(\\w+)((?<=[\\w\\s+])(\\<)(\\w+)(\\>))?(?=\\s*\\()",
			"captures": {
				"0": {
					"name": "meta.function.call.v"
				}
				// "1": {
				// 	"patterns": [
				// 		{
				// 			"include": "#illegal-name"
				// 		},
				// 		{
				// 			"match": "\\w+",
				// 			"name": "entity.name.function.v"
				// 		}
				// 	]
				// },
				// "2": {
				// 	"patterns": [
				// 		{
				// 			"include": "#generic"
				// 		}
				// 	]
				// }
			}
		},
		"type": {
			"name": "meta.definition.type.v",
			"match": "^\\s*(?:(pub)?\\s+)?(type)\\s+(\\w*)\\s+(?:\\w+\\.+)?(\\w*)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.v"
				},
				"2": {
					"name": "storage.type.type.v"
				}
				// "3": {
				// 	"patterns": [
				// 		{
				// 			"include": "#illegal-name"
				// 		},
				// 		{
				// 			"include": "#types"
				// 		},
				// 		{
				// 			"name": "entity.name.type.v",
				// 			"match": "\\w+"
				// 		}
				// 	]
				// },
				// "4": {
				// 	"patterns": [
				// 		{
				// 			"include": "#illegal-name"
				// 		},
				// 		{
				// 			"include": "#types"
				// 		},
				// 		{
				// 			"name": "entity.name.type.v",
				// 			"match": "\\w+"
				// 		}
				// 	]
				// }
			}
		},
		"enum": {
			"name": "meta.definition.enum.v",
			"match": "^\\s*(?:(pub)?\\s+)?(enum)\\s+(?:\\w+\\.)?(\\w*)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.v"
				},
				"2": {
					"name": "storage.type.enum.v"
				},
				"3": {
					"name": "entity.name.enum.v"
				}
			}
		},
		"interface": {
			"name": "meta.definition.interface.v",
			"match": "^\\s*(?:(pub)?\\s+)?(interface)\\s+(\\w*)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.v"
				},
				"2": {
					"name": "keyword.interface.v"
				}
				// "3": {
				// 	"patterns": [
				// 		{
				// 			"include": "#illegal-name"
				// 		},
				// 		{
				// 			"name": "entity.name.interface.v",
				// 			"match": "\\w+"
				// 		}
				// 	]
				// }
			}
		},
		"struct-access-modifier": {
			"match": "(?<=\\s|^)(mut|pub(?:\\s+mut)?|__global)(:|\\b)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.v"
				},
				"2": {
					"name": "punctuation.separator.struct.key-value.v"
				}
			}
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.delimiter.period.dot.v",
					"match": "\\."
				},
				{
					"name": "punctuation.delimiter.comma.v",
					"match": ","
				},
				{
					"name": "punctuation.separator.key-value.colon.v",
					"match": ":"
				},
				{
					"name": "punctuation.definition.other.semicolon.v",
					"match": ";"
				},
				{
					"name": "punctuation.definition.other.questionmark.v",
					"match": "\\?"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.v",
					"match": "(\\$if|\\$else)"
				},
				{
					"name": "keyword.control.v",
					"match": "\\b(in|or|break|continue|default|unsafe|match|if|else|for|go|goto|defer|return)\\b"
				},
				{
					"name": "keyword.$1.v",
					"match": "\\b(fn|type|enum|struct|interface|map|assert|sizeof)\\b"
				}
			]
		},
		"storage": {
			"name": "storage.modifier.v",
			"match": "\\b(const|mut|pub)\\b"
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.numeric.v",
					"match": "\\b(i(8|16|nt|64|128)|u(8|16|32|64|128)|f(32|64))\\b"
				},
				{
					"name": "storage.type.$1.v",
					"match": "\\b(bool|byte|byteptr|charptr|voidptr|string|ustring|rune|none)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmethic.v",
					"match": "(\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\-)"
				},
				{
					"name": "keyword.operator.assignment.v",
					"match": "(\\:\\=|\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\&\\=|\\|\\=|\\^\\=|\\&\\&\\=|\\|\\|\\=|\\>\\>\\=|\\<\\<\\=)"
				},
				{
					"name": "keyword.operator.bitwise.v",
					"match": "(\\&|\\||\\^|<(?!<)|>(?!>))"
				},
				{
					"name": "keyword.operator.logical.v",
					"match": "(\\&\\&|\\|\\||\\!)"
				},
				{
					"name": "keyword.operator.relation.v",
					"match": "(\\=\\=|\\!\\=|\\>|\\<|\\>\\=|\\<\\=)"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.float.v",
					"match": "(?:(?:[-]?)(?:[0-9e]*)(?:[.]){1}(?:[0-9]+))"
				},
				{
					"name": "constant.numeric.hex.v",
					"match": "\\b(?:0[xX])(?:[0-9a-fA-F]+)"
				},
				{
					"name": "constant.numeric.integer.v",
					"match": "\\b(?:[-]?)(?:[0-9]+)"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.raw.begin.v"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.raw.end.v"
						}
					},
					"name": "string.quoted.raw.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.single.begin.v"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.single.end.v"
						}
					},
					"name": "string.quoted.single.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.double.begin.v"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.double.end.v"
						}
					},
					"name": "string.quoted.double.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				}
			]
		},
		"string-escaped-char": {
			"patterns": [
				{
					"name": "constant.character.escape.v",
					"match": "\\\\([0-7]{3}|[\\$abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				},
				{
					"name": "invalid.illegal.unknown-escape.v",
					"match": "\\\\[^0-7\\$xuUabfnrtv\\'\"]"
				}
			]
		},
		"string-escaped-char": {
			"patterns": [
				{
					"name": "constant.character.escape.v",
					"match": "\\\\([0-7]{3}|[\\$abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				},
				{
					"name": "invalid.illegal.unknown-escape.v",
					"match": "\\\\[^0-7\\$xuUabfnrtv\\'\"]"
				}
			]
		},
		"string-placeholder": {
			"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
			"name": "constant.other.placeholder.v"
		},
		"illegal-name": {
			"match": "\\d\\w+",
			"name": "invalid.illegal.v"
		}
	}
}